<?php // /**
// * 
// * Implementation of hook_menu
// */
//function student_registration_menu() {
//  $items = array();
//
//  $items['register/member'] = array(
//    'title' => t('REGISTRATION - Student'),
//    'description' => t('Student Registration'),
//    'page callback' => '_student_register_member',
//    'access callback' => 'student_registration_access',
//   
//  );
//  $items['register/success'] = array(
//    'title' => t('REGISTRATION '),
//    'description' => t('User Registration'),
//    'page callback' => '_student_register_success',
//    'access callback' => 'student_registration_access',
//     
//  );
//  return $items;
//}
///**
// * 
// * Menu Call back /register/member
// */
//function _student_register_member() {
//  $output = '';
//  $output .= render(drupal_get_form('student_member_registration_form'));
//  return $output;
//}
///**
// * 
// * Implementation of hook_form
// */
//function student_member_registration_form($form, $form_state) {
//  if (!isset($form_state['stage'])) $form_state['stage'] = 'account';
//  $form = array('#attributes' => array('class' => array('registration-form')));
//  $form = _member_registration_get_header($form, $form_state);
//  
//  switch ($form_state['stage']){
//    case 'account':
//      $form['registration_steps'] = array('#markup' => '<div class="registration-steps account"></div>');
//      return _registration_account_form($form, $form_state);
//      break;
//    case 'detailed':
//      $form['registration_steps'] = array('#markup' => '<div class="registration-steps detailed"></div>');
//      return _member_registration_detailed_form($form, $form_state);
//      break;
//  }
//}
//function student_member_registration_form_validate($form, &$form_state) {
//  if ($form_state['triggering_element']['#value'] == t('Back')) {
//    return;
//  }
//  if ($form_state['triggering_element']['#value'] == t('Cancel')) {
//    drupal_goto('<front>');
//  }
//  
//  switch ($form_state['stage']) {
//    case 'account':
//      if (!filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
//        form_set_error('email', t('Please enter a valid email address.'));
//      }
//      else{
//        if ($user = user_load_by_name($form_state['values']['email'])) {
//          form_set_error('email', t('Email is already registered.'));
//        }
//      }
//      if ($form_state['values']['password'] != $form_state['values']['re_password']) {
//        form_set_error('password', t('Password does not match.'));
//      }
//      break;
// 
//  }
//}
//
//function student_member_registration_form_submit($form, &$form_state) {
//  global $language;
//  switch ($form_state['stage']) {
//    case 'account':
//      $form_state['steps']['account'] = $form_state['values'];
//      if ($form_state['triggering_element']['#value'] == t('Next')){
//        $form_state['new_stage'] = 'detailed';
//      }
//     break;
//     
//    case 'detailed':
//      $form_state['steps']['detailed'] = $form_state['values'];
//      if ($form_state['triggering_element']['#value'] == t('Register')) {
//        $account = $form_state['steps']['account'];
//        $detailed = $form_state['steps']['detailed'];
//
//        $new_user = array(
//          'name' => $account['email'],
//          'pass' => $account['password'],
//          'mail' => $account['email'],
//          'status' => 1, // status active
//          'init' => $account['email'],
//          'roles' => array(1 => 'authenticated user', 4 => 'member'),
//          'language' => $language->language,
//        );
//
//        $user = user_save(null, $new_user); // create new user
//        $profile = profile_create(array('type' => 'member', 'uid' => $user->uid));
//        $lang = LANGUAGE_NONE;
//        $profile->field_user_name[$lang][0]['value'] = $detailed['name'];
//        $profile->field_user_sname[$lang][0]['value'] = $detailed['sname'];
//        $profile->field_user_location[$lang][0]['value'] = $detailed['country'];
//        $profile->field_user_year[$lang]['0']['value'] = $detailed['birth'];
//        
//        
//
//        // get selected areas
//        $areas = array();
//        foreach ($detailed['area'] as $key => $value) {
//          if ($value != 0) {
//            $areas[]['tid'] = $value;
//          }
//        }
//        $profile->field_user_areas[$lang] = $areas;
//
//        // get selected skills
//        $skills = array();
//        foreach ($detailed['offer'] as $key => $value) {
//          if ($value != 0) {
//            $skills[]['tid'] = $value;
//          }
//        }
//        $profile->field_member_skills[$lang] = $skills;
//
//        // get selected serves
//        $serves = array();
//        foreach ($detailed['support'] as $key => $value) {
//          if ($value != 0) {
//            $serves[]['tid'] = $value;
//          }
//        }
//        $profile->field_member_serve[$lang] = $serves;
//
//        $form_state = array();
//        $form_state['values'] = array();
//        $form_state['values']['profile_member'] = array();
//        $form = array();
//        $form['#parents'] = array();
//        field_attach_submit('profile2', $profile, $form, $form_state); // attach $profile to profile2 submit
//        $profile->bundle = 'member'; // main is the profile type which is created in step 3
//        profile2_save($profile);
//
//        // Send notification email
//        student_emails_send_email('confirmation_individual', array('receiver' => $user));
//        //_user_mail_notify('register_no_approval_required', $user);
//        drupal_goto('/register/success');
//      }
//      else{
//        $form_state['new_stage'] = 'account';
//      }
//    break;
//  }
//  
//  if (isset($form_state['steps']['form_build_id'])) {
//    $form_state['values']['form_build_id'] = $form_state['steps']['form_build_id'];
//  }
//  $form_state['steps']['form_build_id'] = $form_state['values']['form_build_id'];
//  $form_state['stage'] = $form_state['new_stage'];
//  $form_state['rebuild'] = TRUE;
//}
//
//function _member_registration_get_header($form, &$form_state) {
//
//  $form_state['stage'] = isset($form_state['stage']) ? $form_state['stage'] : 1; 
//  $form_stages = array('account' => 1, 'detailed' => 2);
//  if (isset($form_stages[$form_state['stage']])) {
//   $current_step = $form_stages[$form_state['stage']];
//  }
//  else {
//   $current_step = 1;
//  }
//   
//  $stages = array(
//    1 => array('data' => t('Email and Password')),
//    2 => array('data' => t('Detailed Information')),
//  );
//   
//  $stages[$current_step]['class'] = array('active');
//  $stages_list = theme('item_list', array('items' => $stages, 'attributes' => array('class' => array('registration-header'))));
//  $mandatory_text = '<div class="messages--status messages status">'.
//                                      t('All fields are required except for the Profile Picture.').
//                                   '</div>';
//  $form['header'] = array('#markup' => $stages_list . $mandatory_text, '#weight' => -2);
//  return $form;
//}
//
//function _member_registration_detailed_form($form, &$form_state){
//  $values = isset($form_state['steps']['detailed']) ? $form_state['steps']['detailed'] : array();
//  
// 
//  $form['detailed']['name'] = array(
//    '#type' => 'textfield',
//    '#title' => t('First name'),
//    '#maxlength' => 60,
//    '#default_value' => isset($values['name']) ? $values['name'] : NULL,
//    '#required' => TRUE,
//    '#prefix' => '<div class="row clearfix">',
//  );
//  $form['detailed']['sname'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Second name'),
//    '#maxlength' => 60,
//    '#default_value' => isset($values['sname']) ? $values['sname'] : NULL,
//    '#required' => TRUE,
//    '#suffix' => '</div>',
//  );
//  $form['detailed']['country'] = array(
//    '#type' => 'select',
//    '#title' => t('Location'),
//    '#options' => array('' => t('Choose Country')) + list_predefined_options_list_option_countries(),
////    '#description' => t('Choose country of operation'),
//    '#default_value' => isset($values['country']) ? $values['country'] : NULL,
//    '#required' => TRUE,
//    '#prefix' => '<div class="row clearfix">',
//  );
// 
// 
//  $years = array();
//  for($i=1900; $i<=intval(date('Y')); $i++){
//    $years[$i] = $i;
//  }
//  $form['detailed']['birth'] = array(
//    '#type' => 'select',
//    '#title' => t('Year of birth'),
//    '#options' => $years,
////    '#description' => t('Year'),
//    '#default_value' => isset($values['birth']) ? $values['birth'] : NULL,
//    '#required' => TRUE,
//    '#suffix' => '</div>',
//  );
// 
//  $form['back'] = array('#type' => 'submit', '#value' => t('Back'), '#attributes' => array('class' => array('cancel')),
//                                      '#limit_validation_errors' => array(), '#submit' => array(), '#prefix' => '<div class="row clearfix">',);
//  $form['register'] = array('#type' => 'submit', '#value' => t('Register'), '#suffix' => '</div>',);
//  
//  return $form;
//}
//if (isset($form_state['steps']['form_build_id'])) {
//    $form_state['values']['form_build_id'] = $form_state['steps']['form_build_id'];
//  }
//
//
//   
//
//function _registration_account_form($form, &$form_state) {
//  $values = isset($form_state['steps']['account']) ? $form_state['steps']['account'] : array();
// 
//  if(arg(2) == 'member'){
//    $form['account'] = array(
//      '#type' => 'container',
//      '#attributes' => array('class' => array('clearfix')),
//      '#tree' => FALSE,
//      '#weight' => -1,
//    );
//   
//  }
//  
//  $form['account']['email'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Email Address'),
//    '#maxlength' => 100,
//    '#description' => t('A Valid email address'),
//    '#default_value' => isset($values['email']) ? $values['email'] : NULL,
//    '#required' => TRUE,
//    '#rules' => array('email'),
//    '#prefix' => '<div class="row clearfix">',
//    '#suffix' => '</div>',
//  );
//  $form['account']['password'] = array(
//    '#type' => 'password',
//    '#title' => t('Password'),
//    '#maxlength' => 15,
//    '#description' => t('6-15 characters'),
//    '#required' => TRUE,
//    '#rules' => array('length[6,15]'),
//    '#prefix' => '<div class="row clearfix">',
//  );
//  $form['account']['re_password'] = array(
//    '#type' => 'password',
//    '#title' => t('Repeat Password'),
//    '#maxlength' => 15,
//    '#required' => TRUE,
//    '#rules' => array('length[6,15]', 'match_field[re_password]'),
//    '#suffix' => '</div>',
//  );
//  $form['cancel'] = array('#type' => 'submit', '#value' => t('Cancel'), '#attributes' => array('class' => array('cancel')),
//                                      '#limit_validation_errors' => array(), '#submit' => array(), '#prefix' => '<div class="row clearfix">',);
//  $form['next'] = array('#type' => 'submit', '#value' => t('Next'), '#suffix' => '</div>',);
//     
//  return $form;
//}


/**
 * @file 
 * Customizations to the Drupal registration system.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function student_registration_form_user_register_form_alter(&$form, &$form_state) {
  // Make this a multi-step form.
  if (!empty($form_state['step']) && $form_state['step'] == 2) {
    student_registration_register_alter_page_two($form, $form_state);
  }
  else {
    // Otherwise we build page 1.
    student_registration_register_alter_page_one($form, $form_state);
  }
}

/**
 * Form alter - Step 1 of user registration.
 */
function student_registration_register_alter_page_one(&$form, &$form_state) {
  // Set the step.
  $form_state['step'] = 1;

  // Add text for step 1.
  $form['step'] = array(
    '#markup' => '<h3>' . t('Step 1 of 2: Account information') . '</h3>',
    '#weight' => -10,
  );

  // Hide the information for step 2.
  $form['field_first_name']['#access'] = FALSE;


  // Set default values (so they work with back button).
  $form['account']['name']['#default_value'] = !empty($form_state['values']['name']) ? $form_state['values']['name'] : '';
  $form['account']['mail']['#default_value'] = !empty($form_state['values']['mail']) ? $form_state['values']['mail'] : '';

  // Add a next button.
  $form['actions']['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next >>',
    '#submit' => array('student_registration_register_next'),
  );

  // Remove the 'Create new account' button from step 1.
  unset($form['actions']['submit']);
}


/**
 * Form alter - Step 2 of user registration.
 */
function student_registration_register_alter_page_two(&$form, &$form_state) {
  // Add text for step 2.
  $form['step'] = array(
    '#markup' => '<h3>' . t('Step 2 of 2: Establishment information') . '</h3>',
    '#weight' => -10,
  );

  // Hide the fields completed on step 1.
  $form['account']['name']['#access'] = FALSE;
  $form['account']['mail']['#access'] = FALSE;

  // Set default values (so they validate).
  $form['account']['name']['#default_value'] = !empty($form_state['values']['name']) ? $form_state['values']['name'] : '';
  $form['account']['mail']['#default_value'] = !empty($form_state['values']['mail']) ? $form_state['values']['mail'] : '';

  // Add a back button.
  $form['actions']['back'] = array(
    '#type' => 'submit',
    '#value' => t('<< Back'),
    '#submit' => array('student_registration_register_back'),
    '#limit_validation_errors' => array(),
  );

   // Adjust the submit button to come last.
  $form['actions']['submit']['#weight'] = 100;
  // Add our own validation handler.
  $form['actions']['submit']['#validate'] = array('student_registration_register_validate');

  // Add an additional submit handler to the whole form.
  $form['#submit'][] = 'student_registration_register_submit';
}

/**
 * Validate handler.
 */


/**
 * Submit handler for next button.
 *
 * Capture the values from page one and store them away so they can be used
 * at final submit time.
 */
function student_registration_register_next($form, &$form_state) {
  // Save the page 1 values.
  $form_state['page_values'][1] = $form_state['values'];

  // Load the page 2 values.
  if (!empty($form_state['page_values'][2])) {
    $form_state['values'] = $form_state['page_values'][2];
  }

  // Set the step.
  $form_state['step'] = 2;
  // Rebuild the form.
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for back button.
 *
 * Since #limit_validation_errors = array() is set, values from page 2
 * will be discarded.
 */
function student_registration_register_back($form, &$form_state) {
  // Load the page 1 values.
  $form_state['values'] = $form_state['page_values'][1];
  // Set the step.
  $form_state['step'] = 1;
  // Rebuild the form.
  $form_state['rebuild'] = TRUE;
}
?>